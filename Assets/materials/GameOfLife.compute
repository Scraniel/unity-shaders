// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#define PRECISION 0.0000001

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float3> Result;
RWTexture2D<float3> ImageInput;

uint isTooCloseToZero(float num) 
{
    return step(-PRECISION, num) * step(num, PRECISION);
}

uint isGreaterThanZero(float3 num)
{
    uint sum = isTooCloseToZero(num.r) + isTooCloseToZero(num.g) + isTooCloseToZero(num.b);
    return step(sum, 0);
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    //fetch each neighbor and current 
    int numDirections = 9;
    float2 directions[] = 
    {
        float2(-1,-1), float2(0,-1), float2(1,-1),
        float2(-1,0), float2(0,0), float2(1,0),
        float2(-1,1), float2(0,1), float2(1,1),
    };

    uint finalSum = 0;
    float3 lerped = float3(0,0,0);
    for(int i = 0; i < numDirections; i++) 
    {
        float3 val = ImageInput[id.xy - directions[i]];
        int greaterThan = isGreaterThanZero(val);
        
        if(greaterThan) 
            lerped += float3(pow(val.r * 255, 2), pow(val.g * 255, 2), pow(val.b * 255, 2));

        finalSum += greaterThan;
    }

    lerped = lerped / (float)finalSum;
    lerped = float3(sqrt(lerped.r)/255.0, sqrt(lerped.g)/255.0, sqrt(lerped.b)/255.0);

    //conways game of life rules:
    //if neighbor count including self is 3, the next generation cell is alive
    //if neighbor count including self is 4, and current cell is alive, the next generation cell is alive
    //otherwise, the next generation cell is dead.
    bool finalSumIsThree = !(finalSum ^ 3);
    bool finalSumIsFour = !(finalSum ^ 4);
    bool midIsAlive = isGreaterThanZero(ImageInput[id.xy]);
    bool alive = finalSumIsThree || (finalSumIsFour && midIsAlive);
    bool sameColour = alive && midIsAlive;
    lerped = sameColour ? ImageInput[id.xy] : lerped;
    
    Result[id.xy] = alive ? lerped : float3(0,0,0);
}
